"------------------------------------
" deopelete
"------------------------------------
let g:deoplete#auto_complete_delay = 0
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 'ignorecase'
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 0
let g:deoplete#auto_refresh_delay = 100
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#max_list = 10000
let g:deoplete#omni#input_patterns = {} " Initialize
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ '...'
                \ ]

" inoremap <expr><tab> pumvisible() ? '\<C-n>' :
"         \ neosnippet#expandable_or_jumpable() ?
"         \    '\<Plug>(neosnippet_expand_or_jump)' : '\<tab>'

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

let g:min_pattern_length = 0

"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
      \ 'jsx',
      \ 'javascript.jsx',
      \ 'vue',
      \ ]

" Enable heavy omni completion.
let g:deoplete#omni_input_patterns = {}
let g:deoplete#omni_input_patterns.typescript = '\h\w*\|[^. \t]\.\w*'
inoremap <expr><C-k>  pumvisible() ? deoplete#close_popup() : '<C-k>'

" neosnippet
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" emmet
" let g:user_emmet_leader_key='<C-e>'
nmap <C-e> <C-y>,
imap <C-e> <C-y>,
vmap <C-e> <C-y>,

let g:user_emmet_settings = {
    \    'variables': {
    \      'lang': "ja"
    \    },
    \   'indentation': '  '
    \ }

" EasyMotion
nmap s <Plug>(easymotion-s2)
vmap s <Plug>(easymotion-s2)
nmap <C-s> <Plug>(easymotion-s2)
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
let g:EasyMotion_leader_key = ";"
let g:EasyMotion_grouping = 1
let g:EasyMotion_use_upper = 1
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1

" racer-rust

" let g:racer_cmd = "$HOME/.cargo/bin/racer"
" let g:racer_experimental_completer = 1

" clever-f
let g:clever_f_use_migemo = 1

function! Flatten(list)
  let val = []
  for elem in a:list
    if type(elem) == type([])
      call extend(val, Flatten(elem))
    else
      call add(val, elem)
    endif
    unlet elem
  endfor
  return val
endfunction

" Denite
let s:ignore_globs = ['.git/', '.ropeproject/', '__pycache__/', 'node_modules/', 'venv/', 'images/', '*.min.*', 'img/', 'fonts/']
let s:ag_ignore_globs = Flatten(map(deepcopy(s:ignore_globs), { k, v -> ['-g', '!' . v] }))
if executable('rg')
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--hidden'] + s:ag_ignore_globs )
  call denite#custom#var('grep', 'command',
        \ ['rg', '--threads', '1', '--hidden'] + s:ag_ignore_globs)
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading'])
else
  call denite#custom#var('file/rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
endif


call denite#custom#source('file_old', 'matchers',
      \ ['matcher_fuzzy', 'matcher_project_files'])
call denite#custom#source('tag', 'matchers', ['matcher_substring'])
if has('nvim')
  call denite#custom#source('file/rec,grep', 'matchers',
        \ ['matcher_cpsm'])
call denite#custom#source('file', 'matchers',
      \ ['converter/abbr_word', 'matcher/fuzzy'])
endif
call denite#custom#source('file_old', 'converters',
      \ ['converter_relative_word'])

call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])

call denite#custom#option('default', {
      \ 'auto_accel': v:true,
      \ 'prompt': '>',
      \ 'source_names': 'short',
      \ })
call denite#custom#option('_', 'highlight_matched_range', 'None')
call denite#custom#option('_', 'highlight_matched_char', 'None')
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)
call denite#custom#action('file', 'buffer',
      \ {context -> denite#do_action(context, 'open', context['targets'])})

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr><C-j>
  \ denite#do_map('move_to_next_line')
  nnoremap <silent><buffer><expr><C-k>
  \ denite#do_map('move_to_previous_line')
  nnoremap <silent><buffer><expr><C-r>
  \ denite#do_map('change_matchers:matcher_substring')
  nnoremap <silent><buffer><expr><C-s>
  \ denite#do_map('change_sorters:sorter_reverse')
endfunction

call denite#custom#source(
\ 'file', 'sorters', ['sorter/word'])

nmap ,ub :Denite -buffer-name=files -direction=topleft buffer <return>
nmap ,uh :Denite file_mru -direction=topleft<return>
nmap ,uf :DeniteBufferDir -buffer-name=files -direction=topleft file file:new<return>
nmap ,uj :DeniteProjectDir file/rec -start-filter -direction=topleft -path=<return>
nmap ,ug :DeniteProjectDir grep -direction=topleft -buffer-name=projectGrep<return>
nmap ,uw :DeniteProjectDir grep -input=`expand('<cword>')` -buffer-name=search
        \ -direction=topleft<return>
" nmap ,uw :<C-u>DeniteCursorWord -buffer-name=search
"         \ -auto-highlight line -direction=topleft<return>
nmap ,uc :Denite -auto-preview colorscheme -direction=topleft<return>
" nmap ,us :cd %:h
"         \ :Denite grep:. -buffer-name=search-buffer -direction=topleft<return>
" nnoremap ,ue :Denite -direction=topleft file_rec/async:!<return>
nnoremap <silent> ft :<C-u>Denite filetype -direction=topleft<return>

" incsearch
map / <Plug>(incsearch-forward)
map z/ <Plug>(incsearch-fuzzy-/)
map m/ <Plug>(incsearch-migemo-/)

function! s:config_customincsearch() abort
  return {
  \  'converters': [
  \    incsearch#config#migemo#converter()
  \  ],
  \  'modules': [
  \    incsearch#config#easymotion#module()
  \  ],
  \  'keymap': {"\<CR>": '<Over>(easymotion)'}
  \}
endfunction

" vim-rooter
let g:rooter_patterns = ['.git/']

" vim-ref
" vim-ref のバッファを q で閉じられるようにする
autocmd FileType ref-* nnoremap <buffer> <silent> q :<C-u>close<CR>

" 辞書定義
let g:ref_source_webdict_sites = {
\   'je': {
\     'url': 'http://dictionary.infoseek.ne.jp/jeword/%s',
\   },
\   'ej': {
\     'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
\   },
\   'w': {
\     'url': 'http://ja.wikipedia.org/wiki/%s',
\   },
\ }

" デフォルトサイト
let g:ref_source_webdict_sites.default = 'ej'

" 出力に対するフィルタ
" 最初の数行を削除
function! g:ref_source_webdict_sites.je.filter(output)
  return join(split(a:output, "\n")[15 :], "\n")
endfunction

function! g:ref_source_webdict_sites.ej.filter(output)
  return join(split(a:output, "\n")[15 :], "\n")
endfunction

" call altercmd#load()

" disable folding markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_toml_frontmatter=1
let g:vim_markdown_json_frontmatter=0
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0

" alpaca
augroup AlpacaTags
  autocmd!
  if exists(':Tags')
    autocmd BufWritePost Gemfile TagsBundle
    autocmd BufEnter * TagsSet
    " 毎回保存と同時更新する場合はコメントを外す
    " autocmd BufWritePost * TagsUpdate
  endif
augroup END

let g:previm_open_cmd = 'open -a Google\ Chrome'

"------------------------------------
" Unite-rails.vim
"------------------------------------
"{{{
" function! UniteRailsSetting()
"   nnoremap <buffer><C-H><C-H><C-H>  :<C-U>Unite rails/view<CR>
"   nnoremap <buffer><C-H><C-H>       :<C-U>Unite rails/model<CR>
"   nnoremap <buffer><C-H>            :<C-U>Unite rails/controller<CR>
"
"   nnoremap <buffer><C-H>c           :<C-U>Unite rails/config<CR>
"   nnoremap <buffer><C-H>s           :<C-U>Unite rails/spec<CR>
"   nnoremap <buffer><C-H>m           :<C-U>Unite rails/db -input=migrate<CR>
"   nnoremap <buffer><C-H>l           :<C-U>Unite rails/lib<CR>
"   nnoremap <buffer><expr><C-H>g     ':e '.b:rails_root.'/Gemfile<CR>'
"   nnoremap <buffer><expr><C-H>r     ':e '.b:rails_root.'/config/routes.rb<CR>'
"   nnoremap <buffer><expr><C-H>se    ':e '.b:rails_root.'/db/seeds.rb<CR>'
"   nnoremap <buffer><C-H>ra          :<C-U>Unite rails/rake<CR>
"   nnoremap <buffer><C-H>h           :<C-U>Unite rails/heroku<CR>
" endfunction
" aug MyAutoCmd
"   au User Rails call UniteRailsSetting()
" aug END
"}}}

"------------------------------------
" othree/javascript-libraries-syntax.vim
"------------------------------------
let g:used_javascript_libs = 'jquery,lo-dash,react,flux,jasmine,chai,vue,ramda,d3'
" jquery, underscore(included lodash), backbone, prelude, angularjs, angularui, angularuirouter, react, flux, requirejs, sugar, jasmine, chai, handlebars, ramda

function! GentleBufferDelete()
  if &modified
    echohl ErrorMsg
    echomsg "No write since last change. No buffer closed."
    echohl NONE
  else
    let s:total_nr_buffers = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))

    if s:total_nr_buffers == 1
      echo "Buffer was not deleted. This is last one."
    else
      bprevious
      bdelete #
      echo "Buffer deleted."
    endif
  endif
endfunction

nmap <C-c> :call GentleBufferDelete()<return>

"------------------------------------
" :Jq
"------------------------------------
command! -nargs=? Jq call s:Jq(<f-args>)
function! s:Jq(...)
    if 0 == a:0
        let l:arg = "."
    else
        let l:arg = a:1
    endif
    execute "%! jq \"" . l:arg . "\""
endfunction

"------------------------------------
" Indent Guides
"------------------------------------
hi IndentGuidesOdd  ctermbg=233
hi IndentGuidesEven ctermbg=234
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'tagbar', 'denite', 'json']

"------------------------------------
" pangloss/vim-javascript
"------------------------------------
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

"------------------------------------
" vim-airline
"------------------------------------
" Powerline系フォントを利用する
set laststatus=2
let g:airline_theme='bubblegum'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#ale#enabled = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''

" tmuxline
"------------------------------------
let g:tmuxline_preset = {
  \'a'    : '#S',
  \'c'    : ['#(whoami)', '#(uptime | cud -d " " -f 1,2,3)'],
  \'win'  : ['#I', '#W'],
  \'cwin' : ['#I', '#W', '#F'],
  \'x'    : '#(date)',
  \'y'    : ['%R', '%a', '%Y'],
  \'z'    : '#H'}
let g:tmuxline_theme = g:airline_theme

"------------------------------------
" ale
"------------------------------------

let g:ale_enabled = 1
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc

" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'

let g:ale_echo_msg_format = '[%linter%]%code: %%s'
let g:ale_sign_error = ''
let g:ale_sign_warning = ''

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

let g:ale_javascript_prettier_use_local_config = 1

" Run both javascript and vue linters for vue files.
let g:ale_linter_aliases = {'vue': ['vue', 'javascript']}
let g:ale_linters = {
      \ 'html': [],
      \ 'css': ['stylelint'],
      \ 'javascript': ['eslint'],
      \ 'typescript': ['tsserver', 'eslint'],
      \ 'vue': ['eslint', 'vls']
      \}

let g:ale_fixers = {
      \   'javascript': ['prettier', 'eslint'],
      \   'php': ['prettier'],
      \   'typescript': ['prettier', 'eslint'],
      \   'vue': ['prettier', 'eslint'],
      \   'ruby': ['rubocop'],
      \   'go': ['goimports'],
      \   'yaml': ['prettier'],
      \   'markdown': ['prettier']
      \}

let g:lightline = {
      \'active': {
      \  'left': [
      \    ['mode', 'paste'],
      \    ['readonly', 'filename', 'modified'],
      \    ['ale'],
      \  ]
      \},
      \'component_function': {
      \  'ale': 'ALEGetStatusLine'
      \}
      \}

nnoremap <C-a><C-f> :ALEFix<CR>
set signcolumn=yes

"------------------------------------
" mhartington/nvim-typescript
"------------------------------------
" let g:nvim_typescript#vue_support = 1
"
"------------------------------------
" vim-vue
"------------------------------------

let g:vue_disable_pre_processors = 1
autocmd FileType vue syntax sync fromstart

"------------------------------------
" LanguageClient-neovim 
"------------------------------------
"
let g:LanguageClient_serverCommands = {
    \ 'vue': ['vls'],
    \ 'html': [],
    \ 'css': [],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }

let g:LanguageClient_autoStart = 1

"------------------------------------
" vim-over
"------------------------------------
nnoremap <silent> <Space>// :OverCommandLine<CR>%s/
"
"------------------------------------
" vim-go
"------------------------------------
let g:go_doc_keywordprg_enabled = 0
let g:go_def_mapping_enabled = 0
let g:go_fmt_autosave = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1

"------------------------------------
" switch.vim
"------------------------------------
let g:switch_custom_definitions =
  \ [
  \   ['hoge', 'fuga', 'piyo'],
  \   ['foo', 'bar', 'baz'],
  \   {
  \     '\<[a-z0-9]\+-\k\+\>': {
  \       '-\(.\)': '_\l\1'
  \     },
  \     '\<[a-z0-9]\+_\k\+\>': {
  \       '_\(.\)': '\U\1'
  \     },
  \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
  \       '\<\([a-z]\)': '\U\1'
  \     },
  \     '\<[A-Z][a-z0-9]\+[A-Z]\k\+\>': {
  \       '\<\([A-Z]\)': '\l\1',
  \       '\([a-z0-9]\)\([A-Z]\)': '\1-\l\2'
  \     },
  \   }
  \ ]

map R <Plug>(operator-replace)

" let g:python3_host_prog = system('type pyenv &>/dev/null && echo -n "$(pyenv root)/versions/$(cat $(pyenv root)/version | head -n 1)/bin/python" || echo -n $(which python)')
au FileType go nmap <silent> <leader>at :GoAddTags<CR>
au FileType go nmap <silent> <leader>rt :GoRemoveTags<CR>
au FileType go nmap <silent> <leader>kf :GoKeyify<CR>
au FileType go nmap <silent> <leader>ie :GoIfErr<CR>
au FileType go nmap <silent> <leader>ip :GoImpl<CR>
au FileType go nmap <silent> <leader>if :GoImplements<CR>
au FileType go nmap <silent> <leader>mv :GoRename<CR>
au FileType go nmap <silent> <leader>gd :GoDef<CR>

"------------------------------------
" swap colors
"------------------------------------
command! -nargs=0 SwapColor call s:SwapColor()
function! s:SwapColor()
  let l:cword = expand('<cword>')
  if l:cword =~? '#\%(\x\{6}\X\?\|\x\{3}\X\?\)'
    call ConvertColorTo('rgb')
  else
    call ConvertColorTo('hex')
  endif
endfunction

nnoremap <silent> cs :SwapColor<CR>

"------------------------------------
" vim-rust
"------------------------------------
let g:rustfmt_autosave = 1

"------------------------------------
" RLS
"------------------------------------
autocmd BufReadPost *.rs setlocal filetype=rust
set hidden

"------------------------------------
" miniyank
"------------------------------------
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)


" --------------------------------
" ruby-formatter/rufo-vim
" --------------------------------
" Enable rufo (RUby FOrmat)
let g:rufo_auto_formatting = 1

